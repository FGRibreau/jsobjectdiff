#!/usr/bin/env node

var jsobjectDiff = require('../');
var _            = require('lodash');
var fs           = require('fs');

var json = fs.readFileSync('../config.json');

function collect(val, memo) {
  memo.push(val);
  return memo;
}

process.argv.forEach(function(val, index, array) {
  console.log(val, typeof(val));
  if (val = '--pre') {
    json.pre = '(function (Bringr) {';
  }

  if (val = '--post') {
    json.post = 'return Bringr;})({});'
  }

  if (val = '--file1') {
    json.files[0] = JSON.parse(array[++index]);
  }

  if (val = '--file2') {
    json.files[1] = JSON.parse(array[++index]);
  }

  if (val = '--save') {
    fs.writeFile('package.json', JSON.stringify(json, null, 2));
  }
});


if (!json.files || !Array.isArray(json.files) || json.files.length !== 2) {
  console.log('files should be defined');
  process.exit(1);
}

var filesWithExtract = json.files.map(function(fileTab) {
  return {
    filepath: fileTab[0],
    objectpath: fileTab[1].split('.'),
    extract: function(object) {
      function findObject(object, i) {
        if (i < this.objectpath.length - 1) {
          return findObject(object[this.objectpath[i]], ++i);
        }
        return object[this.objectpath[i]];
      }
      return findObject(object, 0)[_.first(_.last(this.filepath.split('/')).split('.'))];
    }
  };
});

var diff = jsobjectDiff.compare(json.pre, filesWithExtract, json.post);
if (diff.length === 0) {
  process.exit(0);
}

console.log('Diff : ');
console.log(JSON.stringify(diff, null, 2));
process.exit(diff.length);